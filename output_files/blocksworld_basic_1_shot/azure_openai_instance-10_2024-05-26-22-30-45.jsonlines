{"model_config": {"plan": {"model_name": "azure_openai", "model_path": "GPT4-Turbo-Norway", "examples_chat": false, "prompt_file": "./llm_planning/prompt_templates/planning_template_non_interactive.txt", "temp": 0, "max_tokens": null, "max_history": null, "caching": "default", "examples_file": "/home/arunim/Desktop/semusi/autoplanbench/data/blocksworld/few_shot_examples_basic/basic_examples_instance-1.json"}, "translate": {"model_name": "azure_openai", "model_path": "GPT4-Turbo-Norway", "examples_chat": false, "prompt_file": "./llm_planning/prompt_templates/translation_template.txt", "examples_file": "/home/arunim/Desktop/semusi/autoplanbench/data/blocksworld/translation_examples.json", "temp": 0, "max_tokens": 256, "max_history": 0, "caching": "default"}}, "task": {"task_num": 10}, "translation_neural": true, "positive_feedback": "full", "subgoal_feedback": false, "provide_state": false, "incremental": false, "not_finished_feedback": true, "by_action": false, "date": "2024-05-26", "max_steps": 1, "break_limit": 1}
{"plan_prompt": "You are an assistant for giving instructions to successfully complete small tasks.\nI need to reach a specific goal state and do not know the individual steps I need to do. Please instruct me how to complete my task.\nI can only use objects that are observable in the situation.\n\nMy task is to execute actions until reaching my goal. My goal is that in the end object_0 is on object_3, object_1 is on object_2\n\nI can carry out the following actions:\npick up an object A from the table with an empty hand\nput down an object A\nstack an object A on an object B\nunstack an object A from an object B\n\nI have the following restrictions on my actions:\nI can only pick up an object A from the table with an empty hand if it is the case that A is clear and A is on the table and the hand is empty\nI can only put down an object A if it is the case that A is being held\nI can only stack an object A on an object B if it is the case that B is clear and A is being held\nI can only unstack an object A from an object B if it is the case that A is on B and A is clear and the hand is empty\n\nThe actions have the following effects on the state:\nOnce I pick up an object A from the table with an empty hand, it is the case that A is being held\nOnce I pick up an object A from the table with an empty hand, it is not the case anymore that A is clear and it is not the case anymore that A is on the table and it is not the case anymore that the hand is empty\nOnce I put down an object A, it is the case that A is clear and the hand is empty and A is on the table\nOnce I put down an object A, it is not the case anymore that A is being held\nOnce I stack an object A on an object B, it is the case that the hand is empty and A is clear and A is on B\nOnce I stack an object A on an object B, it is not the case anymore that B is clear and it is not the case anymore that A is being held\nOnce I unstack an object A from an object B, it is the case that A is being held and B is clear\nOnce I unstack an object A from an object B, it is not the case anymore that A is on B and it is not the case anymore that A is clear and it is not the case anymore that the hand is empty\n\n\n\nHere are some examples\n[STATEMENT]\n My goal is that in the end object_2 is on object_1\nMy current initial situation is as follows: \nThere are 4 objects: object_0, object_1, object_2, object_3\nCurrently, object_0 is clear, object_0 is on the table, object_1 is clear, object_1 is on object_2, object_2 is on the table, object_3 is clear, object_3 is on the table, the hand is empty\n[PLAN]\n unstack object object_1 from object object_2\nAs the next step, put down object object_1\nAs the next step, pick up object object_2 from the table with an empty hand\nNow, stack object object_2 on object object_1\n[PLAN END]\n\nPlease provide me a step-by-step instruction for how to complete my task. Remember: My goal is that in the end object_0 is on object_3, object_1 is on object_2.\nPlease provide each step in a new line.\n", "translate_prompt": "Your task is to translate natural language instructions into a schematic planning language.\n\nEach of the instructions should be converted to a tuple that matches any of the example templates below, where the tokens starting with a question mark should be replaced by the actual object.\nIf none of the action templates below matches the original instruction then choose one with a similar meaning if possible. Otherwise, keep the original one.\n\nThese are the action templates and their descriptions:\n(pick-up ?ob)\ndescription: pick up object {?ob} from the table with an empty hand\n\n(put-down ?ob)\ndescription: put down object {?ob}\n\n(stack ?ob ?underob)\ndescription: stack object {?ob} on object {?underob}\n\n(unstack ?ob ?underob)\ndescription: unstack object {?ob} from object {?underob}\n\n(look-around)\nlook around to get a state description\n\nIf one of the following objects matches the objects in the original instruction then replace each of the tokens with question marks by the appropriate object. Otherwise, replace it with the original object.\n\nThese are the available objects:\nfire\nkumquat_8\nobject_0\nobject_1\nobject_2\nobject_3\nobject_50\nrain\nscreen\n\n\nHere are some examples for your task:\nInput: Now, stack object screen on top of object fire.\nOutput: (stack screen fire)\n\n\nInput: Once you are done, please put down object fire.\nOutput: (put-down fire)\n\n\nInput: First, unstack object rain from object object_50 and then pick up object kumquat_8 from the table.\nOutput: (unstack rain object_50)\n(pick-up kumquat_8)\n\n\nInput: The next step is to stack object kumquat_8 on top of object screen.\nOutput: (stack kumquat_8 screen)\n\n"}
{"text": "My current situation is as follows: \nThere are 4 objects: object_0, object_1, object_2, object_3\nCurrently, object_0 is on the table, object_1 is on the table, object_2 is clear, object_2 is on object_1, object_3 is clear, object_3 is on object_0, the hand is empty", "type": "World state"}
{"text": "unstack object_3 from object_0\nput down object_3\nunstack object_2 from object_1\nput down object_2\npick up object_0 from the table with an empty hand\nstack object_0 on object_3\npick up object_1 from the table with an empty hand\nstack object_1 on object_2\n[PLAN END]", "type": "Plan Model"}
{"text": ["(unstack object_3 object_0)", "(put-down object_3)", "(unstack object_2 object_1)", "(put-down object_2)", "(pick-up object_0)", "(stack object_0 object_3)", "(pick-up object_1)", "(stack object_1 object_2)"], "type": "Translation Model"}
{"text": "(unstack object_3 object_0)", "type": "Translation Model", "executable": true}
{"text": "(put-down object_3)", "type": "Translation Model", "executable": true}
{"text": "(unstack object_2 object_1)", "type": "Translation Model", "executable": true}
{"text": "(put-down object_2)", "type": "Translation Model", "executable": true}
{"text": "(pick-up object_0)", "type": "Translation Model", "executable": true}
{"text": "(stack object_0 object_3)", "type": "Translation Model", "executable": true}
{"text": "(pick-up object_1)", "type": "Translation Model", "executable": true}
{"text": "(stack object_1 object_2)", "type": "Translation Model", "executable": true}
{"success": true, "reached_goal": true, "executable": true, "n_steps": 1, "step_reached_goal_first": 8, "stopping_reason": "NA", "(on object_0 object_3)": [true, "", "mandatory"], "(on object_1 object_2)": [true, "", "mandatory"]}
{"total_time": 8.227520942687988, "total_input_tokens": 858, "total_output_tokens": 80, "total_tokens": 938, "max_input_tokens": 858, "max_output_tokens": 80, "max_tokens": 938}